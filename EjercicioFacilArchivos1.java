// PROYECTO COMPLETO DE ARCHIVOS EN JAVA (Nivel b√°sico a intermedio)
// -------------------------------------------------------------------
// AUTOR: [Tu nombre o el del alumno]
// FECHA: [Fecha actual]
// DESCRIPCI√ìN GENERAL:
// Este proyecto est√° dise√±ado para ense√±ar de forma progresiva c√≥mo trabajar con archivos en Java.
// Se comienza con la escritura y lectura de archivos de texto, se incluyen pr√°cticas guiadas con comentarios
// y al final se trabaja con archivos binarios. Cada bloque incluye explicaciones detalladas para aprender paso a paso.

import java.io.*; // Importamos todas las clases necesarias para trabajar con archivos
import java.util.Scanner; // Importamos Scanner para entrada de datos por teclado

public class EjercicioFacilArchivos1 {

    public static void main(String[] args) {

        // ---------------------------------------------------------------------------
        // EJERCICIO 1: ESCRIBIR TEXTO B√ÅSICO EN UN ARCHIVO .TXT
        // ---------------------------------------------------------------------------
        try {
            FileWriter fw = new FileWriter("archivo1.txt"); // Creamos un archivo de texto
            BufferedWriter bw = new BufferedWriter(fw);     // Lo envolvemos para escribir l√≠neas m√°s eficientemente

            bw.write("Hola, esto es un archivo de texto."); // Escribimos la primera l√≠nea
            bw.newLine(); // Insertamos un salto de l√≠nea
            bw.write("Escribiendo l√≠nea por l√≠nea con Java."); // Escribimos la segunda l√≠nea

            bw.close(); // Cerramos el archivo para guardar los cambios
            System.out.println("‚úÖ Ejercicio 1: archivo1.txt creado y escrito."); // Confirmaci√≥n en consola

            // üëâ EJERCICIO PROPUESTO: A√±ade m√°s l√≠neas que describan tu comida favorita

        } catch (IOException e) {
            System.out.println("‚ùå Error en Ejercicio 1."); // Mensaje si falla la escritura
        }

        // ---------------------------------------------------------------------------
        // EJERCICIO 2: LEER UN ARCHIVO .TXT L√çNEA A L√çNEA
        // ---------------------------------------------------------------------------
        try {
            FileReader fr = new FileReader("archivo1.txt"); // Abrimos archivo para lectura
            BufferedReader br = new BufferedReader(fr); // Usamos BufferedReader para leer por l√≠neas

            String linea;
            System.out.println("üìñ Ejercicio 2: leyendo archivo1.txt:");

            while ((linea = br.readLine()) != null) { // Mientras haya l√≠neas para leer
                System.out.println("-> " + linea); // Mostramos cada l√≠nea por pantalla
            }

            br.close(); // Cerramos archivo

            // üëâ EJERCICIO PROPUESTO: Cuenta manualmente cu√°ntas l√≠neas se imprimen

        } catch (IOException e) {
            System.out.println("‚ùå Error en Ejercicio 2 al leer archivo.");
        }

        // ---------------------------------------------------------------------------
        // EJERCICIO 3: PEDIR DATOS AL USUARIO Y GUARDARLOS EN UN ARCHIVO
        // ---------------------------------------------------------------------------
        try {
            Scanner sc = new Scanner(System.in); // Iniciamos Scanner para leer datos desde consola
            System.out.print("Introduce tu nombre: ");
            String nombre = sc.nextLine(); // Leemos nombre como texto
            System.out.print("Introduce tu edad: ");
            int edad = sc.nextInt(); // Leemos edad como n√∫mero

            PrintWriter pw = new PrintWriter(new FileWriter("datos_usuario.txt")); // Abrimos archivo para escritura
            pw.println("Nombre: " + nombre); // Escribimos el nombre
            pw.println("Edad: " + edad); // Escribimos la edad
            pw.close(); // Cerramos archivo

            System.out.println("‚úÖ Ejercicio 3: datos guardados en datos_usuario.txt"); // Confirmaci√≥n

            // üëâ EJERCICIO PROPUESTO: A√±ade una l√≠nea preguntando si eres repetidor (true/false)

        } catch (IOException e) {
            System.out.println("‚ùå Error en Ejercicio 3.");
        }

        // ---------------------------------------------------------------------------
        // EJERCICIO 4: CONTAR L√çNEAS Y DETECTAR PALABRAS CLAVE
        // ---------------------------------------------------------------------------
        try {
            BufferedReader br = new BufferedReader(new FileReader("archivo1.txt")); // Abrimos archivo
            String linea;
            int contador = 0; // Contador de l√≠neas

            System.out.println("üìä Ejercicio 4: analizando archivo1.txt:");

            while ((linea = br.readLine()) != null) {
                contador++; // Aumentamos el contador por cada l√≠nea
                if (linea.contains("texto")) { // Si la l√≠nea contiene la palabra "texto"
                    System.out.println("üîç L√≠nea " + contador + " contiene la palabra 'texto': " + linea);
                }
            }

            System.out.println("üìå Total l√≠neas: " + contador); // Mostramos total de l√≠neas
            br.close(); // Cerramos archivo

            // üëâ EJERCICIO PROPUESTO: Cambia "texto" por otra palabra y repite el ejercicio

        } catch (IOException e) {
            System.out.println("‚ùå Error en Ejercicio 4.");
        }

        // ---------------------------------------------------------------------------
        // EJERCICIO 5: CREAR UN ARCHIVO BINARIO (.DAT) Y GUARDAR N√öMEROS
        // ---------------------------------------------------------------------------
        try {
            DataOutputStream dos = new DataOutputStream(new FileOutputStream("numeros.dat")); // Abrimos archivo binario

            dos.writeInt(10); // Guardamos un n√∫mero
            dos.writeInt(25); // Guardamos otro n√∫mero
            dos.writeInt(7);
            dos.writeInt(42);

            dos.close(); // Cerramos el archivo
            System.out.println("‚úÖ Ejercicio 5: archivo binario 'numeros.dat' creado.");

            // üëâ EJERCICIO PROPUESTO: A√±ade tu edad como otro n√∫mero binario

        } catch (IOException e) {
            System.out.println("‚ùå Error en Ejercicio 5.");
        }

        // ---------------------------------------------------------------------------
        // EJERCICIO 6: LEER ARCHIVO BINARIO Y MOSTRAR N√öMERO MAYOR
        // ---------------------------------------------------------------------------
        try {
            DataInputStream dis = new DataInputStream(new FileInputStream("numeros.dat")); // Abrimos archivo binario para lectura

            int mayor = Integer.MIN_VALUE; // Inicializamos variable para m√°ximo
            int num;

            System.out.println("üì• Ejercicio 6: leyendo 'numeros.dat':");

            while (dis.available() > 0) { // Mientras queden bytes por leer
                num = dis.readInt(); // Leemos un n√∫mero entero
                System.out.println("N√∫mero le√≠do: " + num);
                if (num > mayor) mayor = num; // Actualizamos m√°ximo si es necesario
            }

            System.out.println("üèÜ N√∫mero mayor: " + mayor); // Mostramos el mayor le√≠do
            dis.close(); // Cerramos archivo

            // üëâ EJERCICIO PROPUESTO: Haz lo mismo pero calcula tambi√©n el n√∫mero menor

        } catch (IOException e) {
            System.out.println("‚ùå Error en Ejercicio 6.");
        }

        // ---------------------------------------------------------------------------
        // EJERCICIO 7: CONTAR CU√ÅNTOS N√öMEROS PARES HAY EN EL ARCHIVO BINARIO
        // ---------------------------------------------------------------------------
        try {
            DataInputStream dis = new DataInputStream(new FileInputStream("numeros.dat"));
            int pares = 0;
            while (dis.available() > 0) {
                int n = dis.readInt();
                if (n % 2 == 0) pares++;
            }
            dis.close();
            System.out.println("üî¢ Ejercicio 7: hay " + pares + " n√∫meros pares en el archivo binario.");

            // üëâ EJERCICIO PROPUESTO: Intenta tambi√©n contar los impares

        } catch (IOException e) {
            System.out.println("‚ùå Error en Ejercicio 7.");
        }

        // ---------------------------------------------------------------------------
        // EJERCICIO 8: ELIMINAR L√çNEAS DE TEXTO QUE CONTIENEN UNA PALABRA CLAVE
        // ---------------------------------------------------------------------------
        try {
            BufferedReader br = new BufferedReader(new FileReader("archivo1.txt"));
            PrintWriter pw = new PrintWriter("archivo_filtrado.txt");

            String linea;
            while ((linea = br.readLine()) != null) {
                if (!linea.contains("Java")) {
                    pw.println(linea);
                }
            }
            br.close();
            pw.close();
            System.out.println("üßπ Ejercicio 8: creado 'archivo_filtrado.txt' sin l√≠neas que contienen 'Java'.");

            // üëâ EJERCICIO PROPUESTO: Cambia la palabra 'Java' por otra que t√∫ elijas

        } catch (IOException e) {
            System.out.println("‚ùå Error en Ejercicio 8.");
        }
    }
}
