/******************************************************************************************
 * üìò PROYECTO DE ESTUDIO COMPLETO: CAFETERA Y TESTS UNITARIOS EN JAVA (JUnit 5)
 * ----------------------------------------------------------------------------------------
 * ‚úÖ OBJETIVO: Comprender y dominar el uso de pruebas unitarias con JUnit 5 para el examen.
 * ‚úÖ INCLUYE:
 *   1) Teor√≠a explicada paso a paso sobre JUnit 5
 *   2) Clase Cafetera con comentarios detallados
 *   3) Clase de test unitarios completa, explicando el prop√≥sito de cada test
 *   4) Buenas pr√°cticas y recordatorios clave para aprobar con soltura
 ******************************************************************************************/

/******************************************************************************************
 * üß† SECCI√ìN 1: CLASE DE PRODUCCI√ìN - Cafetera
 * ----------------------------------------------------------------------------------------
 * Esta clase representa una cafetera simple con funciones t√≠picas:
 * - Llenar, vaciar, servir taza, agregar caf√©
 * - Verificar si queda caf√© o no
 * - Lanza excepci√≥n si se desborda al a√±adir caf√©
 ******************************************************************************************/

public class Cafetera {
    // üîí Atributo inmutable: capacidad m√°xima de la cafetera
    private final int capacidadMaxima;

    // üì¶ Atributo modificable: cantidad actual de caf√© disponible
    private int cantidadActual;

    /**
     * üõ†Ô∏è Constructor con par√°metro:
     * Crea una cafetera llena con la capacidad especificada.
     * Ejemplo: new Cafetera(500) -> capacidadM√°xima = 500, cantidadActual = 500
     */
    public Cafetera(int capacidad) {
        this.capacidadMaxima = capacidad;
        this.cantidadActual = capacidad;
    }

    /**
     * üõ†Ô∏è Constructor por defecto:
     * Crea una cafetera vac√≠a con capacidad m√°xima de 1000 ml
     */
    public Cafetera() {
        this.capacidadMaxima = 1000;
        this.cantidadActual = 0;
    }

    // üì§ Getter: devuelve la capacidad m√°xima
    public int getCapacidadMaxima() {
        return capacidadMaxima;
    }

    // üì• Getter: devuelve la cantidad actual de caf√©
    public int getCantidadActual() {
        return cantidadActual;
    }

    /**
     * üîÑ M√©todo que llena la cafetera a su capacidad m√°xima
     */
    public void llenarCafetera() {
        this.cantidadActual = this.capacidadMaxima;
    }

    /**
     * ‚òï M√©todo que sirve una taza de caf√©
     * Si la cantidad solicitada es mayor que la disponible, la vac√≠a por completo
     * @param cant Cantidad de caf√© que se desea servir
     */
    public void servirTaza(int cant) {
        if (cant > this.cantidadActual) {
            this.cantidadActual = 0; // No hay suficiente: se sirve lo que hay
        } else {
            this.cantidadActual -= cant; // Se descuenta normalmente
        }
    }

    /**
     * üö´ M√©todo que vac√≠a por completo la cafetera
     */
    public void vaciarCafetera() {
        this.cantidadActual = 0;
    }

    /**
     * ‚úÖ M√©todo que comprueba si queda caf√©
     * @return true si cantidadActual > 0
     */
    public boolean quedaCafe() {
        return this.cantidadActual > 0;
    }

    /**
     * ‚ûï M√©todo que agrega caf√© a la cafetera
     * ‚ö†Ô∏è Si se supera la capacidad m√°xima, lanza excepci√≥n
     * @param cant Cantidad a a√±adir
     */
    public void agregarCafe(int cant) {
        this.cantidadActual += cant;
        if (this.cantidadActual > this.capacidadMaxima) {
            throw new IllegalArgumentException("Cafetera desbordada");
        }
    }
}

/******************************************************************************************
 * üß™ SECCI√ìN 2: CLASE DE PRUEBAS UNITARIAS - CafeteraTest
 * ----------------------------------------------------------------------------------------
 * Esta clase prueba TODOS los m√©todos de la clase Cafetera de forma independiente.
 * Utiliza las principales anotaciones de JUnit 5:
 * - @Test ‚Üí indica que es un caso de prueba
 * - @BeforeEach ‚Üí se ejecuta antes de cada test (preparaci√≥n)
 * - @AfterEach ‚Üí se ejecuta despu√©s de cada test (limpieza)
 * - @AfterAll ‚Üí muestra mensaje tras finalizar todos los tests
 ******************************************************************************************/

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CafeteraTest {
    private Cafetera cafetera; // Objeto que se probar√° en cada test

    /**
     * üîß M√©todo que se ejecuta antes de cada test para asegurar entorno limpio
     */
    @BeforeEach
    public void setUp() {
        cafetera = new Cafetera(500); // Inicia cada prueba con una cafetera llena de 500ml
    }

    /**
     * ‚úÖ Verifica que el constructor parametrizado funciona correctamente
     */
    @Test
    public void testConstructorParametrizado() {
        assertEquals(500, cafetera.getCapacidadMaxima());
        assertEquals(500, cafetera.getCantidadActual());
    }

    /**
     * ‚úÖ Verifica el constructor por defecto: capacidad 1000 y vac√≠a
     */
    @Test
    public void testConstructorPorDefecto() {
        Cafetera caf = new Cafetera();
        assertEquals(1000, caf.getCapacidadMaxima());
        assertEquals(0, caf.getCantidadActual());
    }

    /**
     * üîÅ Verifica que llenar la cafetera tras vaciarla la deja llena
     */
    @Test
    public void testLlenarCafetera() {
        cafetera.vaciarCafetera();
        cafetera.llenarCafetera();
        assertEquals(500, cafetera.getCantidadActual());
    }

    /**
     * ‚òï Prueba servir una taza con suficiente caf√©
     */
    @Test
    public void testServirTazaConSuficiente() {
        cafetera.servirTaza(150);
        assertEquals(350, cafetera.getCantidadActual());
    }

    /**
     * ‚òï Prueba servir una taza con m√°s cantidad que la disponible
     */
    @Test
    public void testServirTazaInsuficiente() {
        cafetera.servirTaza(600);
        assertEquals(0, cafetera.getCantidadActual());
    }

    /**
     * üö´ Prueba vaciar completamente la cafetera
     */
    @Test
    public void testVaciarCafetera() {
        cafetera.vaciarCafetera();
        assertEquals(0, cafetera.getCantidadActual());
    }

    /**
     * üîç Comprueba el m√©todo quedaCafe() con y sin contenido
     */
    @Test
    public void testQuedaCafe() {
        assertTrue(cafetera.quedaCafe());
        cafetera.vaciarCafetera();
        assertFalse(cafetera.quedaCafe());
    }

    /**
     * ‚ûï Verifica que se puede agregar caf√© correctamente si no desborda
     */
    @Test
    public void testAgregarCafeCorrecto() {
        cafetera.vaciarCafetera();
        cafetera.agregarCafe(300);
        assertEquals(300, cafetera.getCantidadActual());
    }

    /**
     * ‚ö†Ô∏è Verifica que agregar demasiado caf√© lanza excepci√≥n
     */
    @Test
    public void testAgregarCafeDesbordado() {
        assertThrows(IllegalArgumentException.class, () -> cafetera.agregarCafe(1000));
    }

    /**
     * üßπ M√©todo de limpieza opcional tras cada test
     */
    @AfterEach
    public void tearDown() {
        cafetera = null; // Liberamos la referencia para evitar errores posteriores
    }

    /**
     * üì¢ Mensaje final para confirmar la ejecuci√≥n total de pruebas
     */
    @AfterAll
    public static void finDePruebas() {
        System.out.println("‚úÖ TODOS LOS TESTS DE CAFETERA FINALIZADOS CORRECTAMENTE ‚úÖ");
    }
}

/******************************************************************************************
 * üìö RESUMEN FINAL PARA REPASO R√ÅPIDO (ANTES DEL EXAMEN)
 * ----------------------------------------------------------------------------------------
 * ‚û§ Toda clase a testear debe tener una clase separada de tests.
 * ‚û§ Cada test debe:
 *     - Ser independiente
 *     - Usar una aserci√≥n clara (assertEquals, assertTrue, assertThrows...)
 * ‚û§ Anotaciones m√°s importantes de JUnit 5:
 *     @Test, @BeforeEach, @AfterEach, @BeforeAll, @AfterAll
 * ‚û§ assertThrows se usa para comprobar excepciones (desbordamiento, errores...)
 * ‚û§ Usa IDE como NetBeans o VS Code para ver resultados en verde/rojo f√°cilmente
 ******************************************************************************************/
