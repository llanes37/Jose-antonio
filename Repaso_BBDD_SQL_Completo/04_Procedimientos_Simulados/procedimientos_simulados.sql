-- #############################################################
-- ‚öôÔ∏è BLOQUE 04: PROCEDIMIENTOS SIMULADOS ‚Äî TEOR√çA, C√ìDIGO Y EJERCICIOS
-- #############################################################

/*
üìò TEOR√çA DE PROCEDIMIENTOS ALMACENADOS Y SIMULADOS

1. ¬øQu√© es un procedimiento almacenado?
   - Conjunto de sentencias SQL agrupadas bajo un nombre.
   - Permite encapsular l√≥gica, reutilizar c√≥digo y simplificar llamadas.
   - Sintaxis MySQL:
     CREATE PROCEDURE Nombre([IN|OUT|INOUT] par√°metro TIPO,‚Ä¶)
     BEGIN
       -- l√≥gica imperativa (IF, LOOP, SQL‚Ä¶);
     END;

2. Simulaci√≥n en SQLite / SQL puro:
   - No existen SP nativos; se usan consultas con CASE, IF y transacciones.
   - √ötil para entender el flujo antes de usar SP reales.

3. Ventajas:
   - Mantenibilidad: cambia la l√≥gica en un solo sitio.
   - Seguridad: defines permisos m√°s f√°cilmente.
   - Rendimiento: se compilan en el servidor.

4. Cu√°ndo usar:
   - Operaciones repetitivas (ej. c√°lculos, validaciones).
   - L√≥gica de negocio compleja (IF‚Ä¶ELSE, bucles).
   - Interfaces limpias para aplicaciones (CALL en lugar de DML directo).

*/

-- -------------------------------------------------------------
-- 1Ô∏è‚É£ Simulaci√≥n con CASE (procedimiento impl√≠cito)
-- -------------------------------------------------------------
-- * Calcula el nivel salarial seg√∫n el salario de cada empleado.
SELECT nombre,
       CASE
         WHEN salario < 1000 THEN 'Bajo'
         WHEN salario BETWEEN 1000 AND 2000 THEN 'Medio'
         ELSE 'Alto'
       END AS nivel_salario
FROM empleados;
-- ‚úÖ √ötil para entender l√≥gica condicional como si fuera un procedimiento.

-- -------------------------------------------------------------
-- 2Ô∏è‚É£ Procedimiento Almacenado: ObtenerNivelSalario
-- -------------------------------------------------------------
DELIMITER $$
CREATE PROCEDURE ObtenerNivelSalario()
BEGIN
  -- Muestra nombre y nivel salarial de todos los empleados
  SELECT nombre,
         CASE
           WHEN salario < 1000 THEN 'Bajo'
           WHEN salario BETWEEN 1000 AND 2000 THEN 'Medio'
           ELSE 'Alto'
         END AS nivel_salario
  FROM empleados;
END $$
DELIMITER ;
-- ‚úÖ Ejecuta con: CALL ObtenerNivelSalario();

-- -------------------------------------------------------------
-- 3Ô∏è‚É£ Procedimiento con Par√°metro: BuscarEmpleado
-- -------------------------------------------------------------
DELIMITER $$
CREATE PROCEDURE BuscarEmpleado(IN empNombre VARCHAR(100))
BEGIN
  -- Busca empleados cuyo nombre contenga el par√°metro
  SELECT id, nombre, salario
  FROM empleados
  WHERE nombre LIKE CONCAT('%', empNombre, '%');
END $$
DELIMITER ;
-- ‚úÖ Ejecuta con: CALL BuscarEmpleado('Ana');

-- -------------------------------------------------------------
-- 4Ô∏è‚É£ Procedimiento de Inserci√≥n: AgregarCliente
-- -------------------------------------------------------------
DELIMITER $$
CREATE PROCEDURE AgregarCliente(IN cliNombre VARCHAR(100), IN cliEmail VARCHAR(100))
BEGIN
  -- Inserta un cliente nuevo; email debe ser √∫nico
  INSERT INTO clientes (nombre, email)
  VALUES (cliNombre, cliEmail);
END $$
DELIMITER ;
-- ‚úÖ Ejecuta con: CALL AgregarCliente('Prueba', 'prueba@example.com');

-- -------------------------------------------------------------
-- 5Ô∏è‚É£ Eliminaci√≥n Condicional: EliminarEmpleadoPorSalario
-- -------------------------------------------------------------
DELIMITER $$
CREATE PROCEDURE EliminarEmpleadoPorSalario(IN minSalario DECIMAL(10,2))
BEGIN
  -- Elimina empleados con salario menor al par√°metro
  DELETE FROM empleados
  WHERE salario < minSalario;
END $$
DELIMITER ;
-- ‚úÖ Ejecuta con: CALL EliminarEmpleadoPorSalario(1000.00);

-- -------------------------------------------------------------
-- 6Ô∏è‚É£ Limpieza de Procedimientos (opcional)
-- -------------------------------------------------------------
-- DROP PROCEDURE IF EXISTS ObtenerNivelSalario;
-- DROP PROCEDURE IF EXISTS BuscarEmpleado;
-- DROP PROCEDURE IF EXISTS AgregarCliente;
-- DROP PROCEDURE IF EXISTS EliminarEmpleadoPorSalario;

-- #############################################################
-- üß™ EJERCICIOS PROPUESTOS
-- #############################################################

-- 1Ô∏è‚É£ Simulaci√≥n con CASE:
--    ‚Ä¢ Copia el primer bloque de SELECT y modifica los rangos:
--      - salario < 1000   ‚Üí 'Junior'
--      - 1000‚Äì3000         ‚Üí 'Senior'
--      - >3000             ‚Üí 'Lead'
--    ‚Ä¢ Ejecuta y comprueba los resultados.

-- 2Ô∏è‚É£ SP b√°sico sin par√°metros:
--    ‚Ä¢ Crea y prueba un SP llamado ListarClientes:
--         - Devuelva id y nombre de todos los clientes.
--    ‚Ä¢ Invoca con: CALL ListarClientes();

-- 3Ô∏è‚É£ SP con par√°metro:
--    ‚Ä¢ Crea un SP FiltrarClientes por dominio de email:
--         - Par√°metro: dominio VARCHAR(100)
--         - WHERE email LIKE CONCAT('%', dominio)
--    ‚Ä¢ Prueba con: CALL FiltrarClientes('example.com');

-- 4Ô∏è‚É£ SP de inserci√≥n:
--    ‚Ä¢ Crea un SP AgregarDepartamento:
--         - Par√°metro: nombre VARCHAR(100)
--         - INSERT INTO departamentos(nombre)
--    ‚Ä¢ Gestiona duplicados: ¬øqu√© ocurre si el nombre ya existe?

-- 5Ô∏è‚É£ SP de borrado condicional:
--    ‚Ä¢ Crea un SP EliminarClientesAntiguos:
--         - Par√°metro: fecha_limite DATE
--         - DELETE FROM clientes WHERE fecha_alta < fecha_limite
--    ‚Ä¢ Invoca con: CALL EliminarClientesAntiguos('2022-01-01');

-- 6Ô∏è‚É£ Ejercicio avanzado:
--    ‚Ä¢ Dentro de un procedimiento, usa IF‚Ä¶ELSE para:
--         - Si no hay registros que cumplan la condici√≥n, SIGNAL un error.
--         - Si existen, realiza la operaci√≥n y retorna un mensaje de √©xito.

-- #############################################################
-- ‚úÖ FIN BLOQUE 04: PROCEDIMIENTOS SIMULADOS
-- #############################################################
