-- #############################################################
-- üîÅ BLOQUE 05: CURSORES SIMULADOS ‚Äî TEOR√çA, C√ìDIGO Y EJERCICIOS
-- #############################################################

/*
üìò TEOR√çA DE CURSORES

1. ¬øQu√© es un cursor?
   - Mecanismo que permite procesar fila a fila los resultados de una consulta.
   - Se usa cuando necesitas l√≥gica por registro (actualizaciones, validaciones‚Ä¶).

2. Simulaci√≥n en SQLite / SQL puro:
   - No hay cursores nativos: usamos SELECT con ORDER BY, LIMIT y CASE.
   - El procesamiento fila a fila se realiza externamente (Java: while(rs.next()), Python: for row in cursor).

3. Cursores reales en MySQL:
   - Definidos dentro de procedimientos con DECLARE CURSOR, OPEN, FETCH y handlers.
   - Permiten l√≥gica imperativa y bucles controlados (LOOP).

4. ¬øCu√°ndo usar cursores?
   - C√°lculos complejos por registro.
   - Transformaciones paso a paso.
   - Integridad de datos en procesos ETL peque√±os.
*/

-- -------------------------------------------------------------
-- 1Ô∏è‚É£ SELECT ORDENADO COMO CURSOR SIMULADO
-- -------------------------------------------------------------
-- * Obtenemos empleados ordenados por salario descendente.
SELECT id, nombre, salario
FROM empleados
ORDER BY salario DESC;
-- ‚úÖ Simula OPEN + FETCH inicial de un cursor: el primer registro es el de mayor salario.

-- -------------------------------------------------------------
-- 2Ô∏è‚É£ TOP-N (LIMIT) COMO FETCH M√öLTIPLE
-- -------------------------------------------------------------
-- * Recuperar solo los 3 empleados mejor pagados.
SELECT id, nombre, salario
FROM empleados
ORDER BY salario DESC
LIMIT 3;
-- ‚úÖ Simula FETCH FIRST 3 ROWS del cursor.

-- -------------------------------------------------------------
-- 3Ô∏è‚É£ PROCESAMIENTO CON CONDICIONES POR FILA
-- -------------------------------------------------------------
-- * Mostrar estado salarial con mensajes personalizados.
SELECT id,
       nombre,
       CASE
         WHEN salario < 1000 THEN CONCAT('‚ùó ', nombre, ' tiene salario bajo (', salario, ')')
         ELSE CONCAT('‚úÖ ', nombre, ' - OK (', salario, ')')
       END AS estado_salario
FROM empleados
ORDER BY salario ASC;
-- ‚úÖ Simula FETCH + l√≥gica IF/ELSE interna en cada iteraci√≥n.

-- -------------------------------------------------------------
-- 4Ô∏è‚É£ CURSOR REAL DENTRO DE PROCEDIMIENTO (MySQL)
-- -------------------------------------------------------------
DELIMITER $$
CREATE PROCEDURE ProcesarEmpleados()
BEGIN
  DECLARE fin INT DEFAULT FALSE;
  DECLARE emp_id INT;
  DECLARE emp_nom VARCHAR(100);
  DECLARE emp_sal DECIMAL(10,2);

  -- Cursor para recorrer todos los empleados
  DECLARE cursor_emp CURSOR FOR
    SELECT id, nombre, salario FROM empleados ORDER BY id;

  -- Handler para detectar fin de datos
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fin = TRUE;

  OPEN cursor_emp;
  bucle: LOOP
    FETCH cursor_emp INTO emp_id, emp_nom, emp_sal;
    IF fin THEN
      LEAVE bucle;
    END IF;
    -- Ejemplo de procesamiento: aumentar salario un 5%
    UPDATE empleados
    SET salario = emp_sal * 1.05
    WHERE id = emp_id;
  END LOOP;
  CLOSE cursor_emp;
END $$
DELIMITER ;
-- ‚úÖ Ejecuta con: CALL ProcesarEmpleados();

-- -------------------------------------------------------------
-- 5Ô∏è‚É£ VERIFICACI√ìN POST-PROCESO
-- -------------------------------------------------------------
-- * Comprobar que todos los salarios se incrementaron correctamente.
SELECT id, nombre, salario
FROM empleados
ORDER BY id;

-- #############################################################
-- üß™ EJERCICIOS PROPUESTOS
-- #############################################################

-- 1Ô∏è‚É£ Ajuste inverso:
--    ‚Ä¢ Modifica el procedimiento ProcesarEmpleados para disminuir
--      en vez de aumentar un 5% los salarios de los empleados.
--    ‚Ä¢ Ejecuta y verifica con SELECT.

-- 2Ô∏è‚É£ Cursor para clientes:
--    ‚Ä¢ Crea un procedimiento ProcesarClientes que recorra
--      SELECT id, nombre, email FROM clientes.
--    ‚Ä¢ Dentro del bucle, actualiza un campo ficticio o registra en log.

-- 3Ô∏è‚É£ Simulaci√≥n externa:
--    ‚Ä¢ Escribe un pseudoc√≥digo Java:
--        while(rs.next()) {
--          // imprime id y nombre
--        }
--      para el SELECT ORDER BY salario.

-- 4Ô∏è‚É£ Cursor anidado:
--    ‚Ä¢ Dentro de un procedimiento, usa dos cursores:
--        ‚Äì Uno sobre departamentos: SELECT id FROM departamentos;
--        ‚Äì Dentro del bucle, otro SELECT COUNT(*) FROM empleados WHERE departamento_id = depto_id;
--      ‚Ä¢ Actualiza una tabla estad√≠stica con esos conteos.

-- 5Ô∏è‚É£ Tarea avanzada:
--    ‚Ä¢ Usa un handler para SIGNAL SQLSTATE y env√≠a un error
--      si en alg√∫n FETCH el salario es NULO o negativo.
